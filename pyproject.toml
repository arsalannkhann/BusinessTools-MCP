[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E", "F", "W", "I", "N", "UP", "YTT", "ANN", "BLE", "FBT", "B", "A", "COM", "C4", "DTZ", "T10", "EM", "EXE", "FA", "ISC", "ICN", "G", "INP", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET", "SLF", "SLOT", "SIM", "TID", "TCH", "INT", "ARG", "PTH", "TD", "FIX", "ERA", "PD", "PGH", "PL", "TRY", "FLY", "NPY", "AIR", "PERF", "FURB", "LOG", "RUF"]

# Ignore specific rules that are too strict for this project
ignore = [
    "E501",    # Line too long
    "ANN101",  # Missing type annotation for `self` in method
    "ANN102",  # Missing type annotation for `cls` in classmethod
    "ANN401",  # Dynamically typed expressions (typing.Any)
    "B008",    # Do not perform function calls in argument defaults
    "COM812",  # Trailing comma missing
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "D105",    # Missing docstring in magic method
    "D107",    # Missing docstring in __init__
    "PLR0913", # Too many arguments to function call
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "RUF012",  # Mutable class attributes should be annotated with `ClassVar`
    "TRY003",  # Avoid specifying long messages outside the exception class
    "EM101",   # Exception must not use a string literal, assign to variable first
    "EM102",   # Exception must not use an f-string literal, assign to variable first
    "FBT001",  # Boolean positional arg in function definition
    "FBT002",  # Boolean default positional argument in function definition
    "UP007",   # Use `X | Y` for type annotations (requires Python 3.10+)
    "FA100",   # Missing `from __future__ import annotations`
    "ANN001",  # Missing type annotation for function argument
    "ANN002",  # Missing type annotation for *args
    "ANN003",  # Missing type annotation for **kwargs
    "ARG002",  # Unused method argument
    "BLE001",  # Do not catch blind exception
    "TRY300",  # Consider moving statement to else block
    "TRY400",  # Use logging.exception instead of logging.error
    "G004",    # Logging statement uses f-string
    "PLR0911", # Too many return statements
    "PLR2004", # Magic value used in comparison
    "PERF401", # Use list comprehension
    "PERF203", # Try-except within loop
]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "__pycache__",
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.10+
target-version = "py310"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and imports
"tests/**/*.py" = ["PLR2004", "S101", "TID252"]

# Config files can have unused imports
"config/*.py" = ["F401"]

# Tools might have complex logic
"tools/*.py" = ["PLR0912", "PLR0915", "C901"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
ignore-fully-untyped = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
# Basic Configuration
python_version = "3.10"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false

# Import Configuration
ignore_missing_imports = true
follow_imports = "silent"
show_column_numbers = true
show_error_context = true

# Error Configuration  
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = true

# Exclusions
exclude = [
    "venv/",
    "__pycache__/", 
    ".pytest_cache/",
    "build/",
    "dist/"
]

[[tool.mypy.overrides]]
module = [
    "tests.*",
    "*.test_*"
]
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "mcp.*",
    "google.*", 
    "googleapi.*",
    "stripe.*",
    "twilio.*",
    "aiohttp.*",
    "fastapi.*"
]
ignore_missing_imports = true
